version: "3.7"

networks:
  n2:
    name: n2
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.230.0.0/24
  n3:
    name: n3
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.210.0.0/24
  n4:
    name: n4
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.220.0.0/24
  n6:
    external: true
  n7:
    name: n7
    driver: bridge
  n8:
    name: n8
    driver: bridge
  n10:
    name: n10
    driver: bridge
  n11:
    name: n11
    driver: bridge
  n12:
    name: n12
    driver: bridge
  n13:
    name: n13
    driver: bridge
  n15:
    name: n15
    driver: bridge
  sbi:
    name: sbi
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.200.0.0/24

services:
  mongodb:
    privileged: true
    networks:
      sbi:
        ipv4_address: 172.200.0.160
    ports:
      - 37017:27017
    image: mongodb:local
    container_name: mongodb
    command: /bin/bash -c 'service tcpdumpd start; mongod --bind_ip 172.200.0.160'
  
  amf:
    networks:
      sbi:
        ipv4_address: 172.200.0.150
      n2:
        ipv4_address: 172.230.0.150
      n11:
      n12:
      n15:
    image: free5gc:v2
    container_name: amf
    volumes:
      - ./config/amfcfg.conf:/root/free5gc/config/amfcfg.conf
      - ./support/TLS/amf.pem:/root/free5gc/support/TLS/amf.pem
      - ./support/TLS/amf.key:/root/free5gc/support/TLS/amf.key
      - ./amf/test/sm_context_test.go:/home/docker/go/src/free5gc/src/amf/amf_consumer/sm_context_test.go
    command: /bin/bash -c 'service tcpdumpd start; ./amf'
    depends_on:
      - nrf
  
  smf:
    networks:
      sbi:
        ipv4_address: 172.200.0.190
      n7:
      n11:
      n10:
      n4:
        ipv4_address: 172.220.0.190
    image: free5gc:v2
    container_name: smf
    volumes:
      - ./config/smfcfg.conf:/root/free5gc/config/smfcfg.conf
      - ./support/TLS/smf.pem:/root/free5gc/support/TLS/smf.pem
      - ./support/TLS/smf.key:/root/free5gc/support/TLS/smf.key
    command: /bin/bash -c 'service tcpdumpd start; ./smf'
    depends_on:
      - nrf
      - upf
  
  pcf:
    networks:
      sbi:
        ipv4_address: 172.200.0.120
      n7:
      n15:
    image: free5gc:v2
    container_name: pcf
    volumes:
      - ./config/pcfcfg.conf:/root/free5gc/config/pcfcfg.conf
      - ./support/TLS/pcf.pem:/root/free5gc/support/TLS/pcf.pem
      - ./support/TLS/pcf.key:/root/free5gc/support/TLS/pcf.key
    command: /bin/bash -c 'service tcpdumpd start; ./pcf'
    depends_on:
      - nrf
  
  ausf:
    networks:
      sbi:
        ipv4_address: 172.200.0.140
      n8:
      n12:
      n13:
    image: free5gc:v2
    container_name: ausf
    volumes:
      - ./config/ausfcfg.conf:/root/free5gc/config/ausfcfg.conf
      - ./support/TLS/ausf.pem:/root/free5gc/support/TLS/ausf.pem
      - ./support/TLS/ausf.key:/root/free5gc/support/TLS/ausf.key
    command: /bin/bash -c 'service tcpdumpd start; ./ausf'
    depends_on:
      - nrf
  
  nrf:
    networks:
      sbi:
        ipv4_address: 172.200.0.180
    image: free5gc:v2
    container_name: nrf
    volumes:
      - ./config/nrfcfg.conf:/root/free5gc/config/nrfcfg.conf
      - ./support/TLS/nrf.pem:/root/free5gc/support/TLS/nrf.pem
      - ./support/TLS/nrf.key:/root/free5gc/support/TLS/nrf.key
    command: /bin/bash -c 'service tcpdumpd start; ./nrf'
    depends_on:
      - upf
  
  nssf:
    networks:
      sbi:
        ipv4_address: 172.200.0.130
    image: free5gc:v2
    container_name: nssf
    volumes:
      - ./config/nssfcfg.conf:/root/free5gc/config/nssfcfg.conf
      - ./support/TLS/nssf.pem:/root/free5gc/support/TLS/nssf.pem
      - ./support/TLS/nssf.key:/root/free5gc/support/TLS/nssf.key
    command: /bin/bash -c 'service tcpdumpd start; ./nssf'
    depends_on:
      - nrf

  udm:
    networks:
      sbi:
        ipv4_address: 172.200.0.110
      n13:
      n10:
      n8:
    image: free5gc:v2
    container_name: udm
    volumes:
      - ./config/udmcfg.conf:/root/free5gc/config/udmcfg.conf
      - ./support/TLS/udm.pem:/root/free5gc/support/TLS/udm.pem
      - ./support/TLS/udm.key:/root/free5gc/support/TLS/udm.key
    command: /bin/bash -c 'service tcpdumpd start; ./udm'
    depends_on:
      - udr
      - nrf
  
  udr:
    networks:
      sbi:
        ipv4_address: 172.200.0.100
    image: free5gc:v2
    container_name: udr
    volumes:
      - ./config/udrcfg.conf:/root/free5gc/config/udrcfg.conf
      - ./support/TLS/udr.pem:/root/free5gc/support/TLS/udr.pem
      - ./support/TLS/udr.key:/root/free5gc/support/TLS/udr.key
    command: /bin/bash -c 'service tcpdumpd start; ./udr'
    depends_on:
      - nrf
  
  upf:
    privileged: true
    networks:
      n6:
      n3:
        ipv4_address: 172.210.0.170
      n4:
        ipv4_address: 172.220.0.170
    image: free5gc:v2
    container_name: upf
    volumes:
      - ./config/upfcfg.yaml:/root/free5gc/config/upfcfg.yaml
    command: /bin/bash -c 'service tcpdumpd start; ./free5gc-upfd'
    depends_on:
      - mongodb
  
  ran:
    privileged: true
    networks:
      n2:
        ipv4_address: 172.230.0.90
      n3:
        ipv4_address: 172.210.0.90
    image: free5gc:v2
    container_name: ran
    volumes:
      - ./config/free5GC.conf:/home/docker/go/src/free5gc/config/free5GC.conf
      - ./ran/test:/home/docker/go/src/free5gc/src/test
    command: /bin/bash -c 'service tcpdumpd start; python3 -m http.server'
    working_dir: /home/docker/go/src/free5gc/src/test
    environment:
      - FREE5GC_AMF_IP=172.230.0.150
      - FREE5GC_RAN_IP=172.230.0.90
      - FREE5GC_ENB_IP=172.210.0.90
      - FREE5GC_UPF_IP=172.210.0.170
      - FREE5GC_AMF_PORT=38412
      - FREE5GC_RAN_PORT=9487
      - FREE5GC_GNB_PORT=2152
      - FREE5GC_UPF_PORT=2152
    depends_on:
      - amf
      - upf
        
  netgraph:
    privileged: true
    networks:
      - sbi
    ports:
      - 18080:8080
    image: netgraph
    container_name: netgraph
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./netgraph/netgraph.py:/opt/netgraph/netgraph.py
      - ./netgraph/netgraph.js:/opt/netgraph/netgraph.js
    environment:
      - NETS_BLACKLIST=ingress,docker_gwbridge,bridge
      - CONTAINERS_BLACKLIST=netgraph
    command: /bin/bash -c 'nodejs /opt/netgraph/netgraph.js'
